name: Build native extensions

on:
  push:
    branches: [main]
  pull_request:

jobs:
  build:
    name: Build on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]

    steps:
    # 1️⃣ 拉代码
    - uses: actions/checkout@v4

    # 2️⃣ 安装 Python
    - uses: actions/setup-python@v5
      with:
        python-version: "3.8"

    # 3️⃣ 安装 pybind11
    - name: Install pybind11
      run: |
        python -m pip install -U pip pybind11

    # 4️⃣ 编译 my_ctools/*.cpp -> my_ctools/*.so|*.pyd
    - name: Compile C++ extensions
      shell: bash
      run: |
        set -e
        # ---------- 公共变量 ----------
        INCLUDES=$(python -m pybind11 --includes)

        # 使用 python -c 方式避免 heredoc 报错
        EXT_SUFFIX=$(python -c "import sysconfig; print(sysconfig.get_config_var('EXT_SUFFIX') or '')")

        echo "Extension suffix: $EXT_SUFFIX"
        echo "pybind11 includes: $INCLUDES"
        echo "Runner OS: $RUNNER_OS"

        # ---------- 遍历并编译 ----------
        for cpp in my_ctools/*.cpp; do
          mod=$(basename "$cpp" .cpp)                # 模块名
          out="my_ctools/${mod}${EXT_SUFFIX}"        # 输出文件
          echo "---- Building $cpp -> $out"

          if [[ "$RUNNER_OS" == "Linux" ]]; then
            g++ -O3 -Wall -std=c++17 -fPIC -shared \
                $INCLUDES $(python3-config --ldflags) \
                "$cpp" -o "$out"
          elif [[ "$RUNNER_OS" == "macOS" ]]; then
            clang++ -O3 -Wall -std=c++17 -shared -undefined dynamic_lookup \
                $INCLUDES \
                "$cpp" -o "$out"
          elif [[ "$RUNNER_OS" == "Windows" ]]; then
            # Windows runner 下使用 MSVC cl
            cpp_win=$(echo "$cpp" | sed 's/\//\\/g')
            out_win=$(echo "$out" | sed 's/\//\\/g')
            cl /nologo /O2 /EHsc /std:c++17 ^
               /I"%PYTHON_INCLUDE%" ^
               /LD "$cpp_win" ^
               /link /OUT:"$out_win"
          else
            echo "Unsupported OS"
            exit 1
          fi
        done

        # 列出生成结果
        ls -lh my_ctools

    # 5️⃣ 上传产物
    - name: Upload compiled modules
      uses: actions/upload-artifact@v4
      with:
        name: my_ctools-${{ matrix.os }}
        path: |
          my_ctools/*.so
          my_ctools/*.pyd
